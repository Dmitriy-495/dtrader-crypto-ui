// src/ui/layout.js
// ------------------------------------------------------------
// –û—Ç–≤–µ—á–∞–µ—Ç –∑–∞ –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ –∫–æ–Ω—Å–æ–ª—å–Ω–æ–≥–æ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ —Å –ø–æ–º–æ—â—å—é terminal-kit
// ------------------------------------------------------------

import terminalKit from "terminal-kit";
const term = terminalKit.terminal;

const RIGHTBAR_WIDTH_PERCENT = parseInt(
  process.env.RIGHTBAR_WIDTH_PERCENT || "40",
  10
);

// ------------------------------------------------------------
// –§—É–Ω–∫—Ü–∏—è —Ä–µ–Ω–¥–µ—Ä–∏–Ω–≥–∞ layout
// ------------------------------------------------------------
function render() {
  term.clear();

  const width = term.width;
  const height = term.height;

  const headerHeight = 3;
  const footerHeight = 3;
  const leftbarWidth = 34;

  const rightbarWidth = Math.floor(
    ((width - leftbarWidth) * RIGHTBAR_WIDTH_PERCENT) / 100
  );
  const contentWidth = width - leftbarWidth - rightbarWidth;

  const headerBottom = headerHeight;
  const footerTop = height - footerHeight + 1;
  const leftbarTop = headerBottom + 1;
  const leftbarBottom = height - footerHeight;

  // ----------------------------
  // HEADER
  // ----------------------------
  term.moveTo(1, 1);
  term.white("‚îå" + "‚îÄ".repeat(width - 2) + "‚îê");
  term.moveTo(1, 2);
  term.white("‚îÇ");
  term.moveTo(width, 2);
  term.white("‚îÇ");
  term.moveTo(4, 2);
  term.bold.white(" DTrader Crypto UI ");
  term.moveTo(1, 3);
  term.white("‚îî" + "‚îÄ".repeat(width - 2) + "‚îò");

  // ----------------------------
  // FOOTER (–∫–æ–º–∞–Ω–¥–Ω–∞—è —Å—Ç—Ä–æ–∫–∞)
  // ----------------------------
  term.moveTo(1, footerTop);
  term.white("‚îå" + "‚îÄ".repeat(width - 2) + "‚îê");
  term.moveTo(1, footerTop + 1);
  term.white("‚îÇ");
  term.moveTo(width, footerTop + 1);
  term.white("‚îÇ");
  // –û—Ä–∞–Ω–∂–µ–≤—ã–π —Ç—Ä–µ—É–≥–æ–ª—å–Ω–∏–∫-–ø—Ä–æ–º–ø—Ç
  term.moveTo(4, footerTop + 1);
  term.colorRgb(255, 165, 0)("‚ñ∂");
  term.moveTo(1, footerTop + 2);
  term.white("‚îî" + "‚îÄ".repeat(width - 2) + "‚îò");

  // ----------------------------
  // LEFTBAR
  // ----------------------------
  for (let y = leftbarTop; y <= leftbarBottom; y++) {
    term.moveTo(1, y).white("‚îÇ");
    term.moveTo(leftbarWidth, y).white("‚îÇ");
  }

  // –£–≥–ª—ã —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è leftbar —Å header/footer
  term.moveTo(1, headerBottom).white("‚îú");
  term.moveTo(leftbarWidth, headerBottom).white("‚î¨");
  term.moveTo(1, footerTop).white("‚îú");
  term.moveTo(leftbarWidth, footerTop).white("‚î¥");

  // ----------------------------
  // RIGHTBAR
  // ----------------------------
  const rightbarStartX = leftbarWidth + contentWidth + 1;
  for (let y = leftbarTop; y <= leftbarBottom; y++) {
    term.moveTo(rightbarStartX, y).white("‚îÇ");
    term.moveTo(width, y).white("‚îÇ");
  }

  // –£–≥–ª—ã —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è rightbar —Å header/footer
  term.moveTo(rightbarStartX, headerBottom).white("‚î¨");
  term.moveTo(width, headerBottom).white("‚î§");
  term.moveTo(rightbarStartX, footerTop).white("‚î¥");
  term.moveTo(width, footerTop).white("‚î§");

  // ----------------------------
  // CONTENT (–±–µ–∑ –≥—Ä–∞–Ω–∏—Ü)
  // ----------------------------
  term.moveTo(leftbarWidth + 2, headerBottom + 2);
  term.white("üìä –ö–æ–Ω—Ç–µ–Ω—Ç–Ω–∞—è –∑–æ–Ω–∞...");
}

// ------------------------------------------------------------
// –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
// ------------------------------------------------------------
export function drawLayout() {
  render();
}

let resizeTimer = null;
export function enableAutoResize() {
  process.stdout.on("resize", () => {
    if (resizeTimer) clearTimeout(resizeTimer);
    resizeTimer = setTimeout(() => render(), 100);
  });
}
